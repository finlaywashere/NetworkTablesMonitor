ext.getOpenCvPlatformPackage = { ->
  return buildType
}

ext.tgetOpenCvPlatformPackage = { ->
  return testType
}


task downloadOpenCv() {
    description = 'Downloads the OpenCV Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def armOpenCv
    def armNTCore
    def armCSCore
    def armWPIUtil

    doFirst {
        def classifier = getOpenCvPlatformPackage()
        def armOpenCvDependency = project.dependencies.create("edu.wpi.first.thirdparty.frc2020.opencv:opencv-jni:3.4.7-2:$classifier@jar")
        def armOpenCvConfig = project.configurations.detachedConfiguration(armOpenCvDependency)
        armOpenCvConfig.setTransitive(false)
        armOpenCv = armOpenCvConfig.files[0].canonicalFile
        //def armCSCoreDep = project.dependencies.create("edu.wpi.first.cscore:cscore-jni:2020.3.2:$classifier@jar")
        //def armCSCoreConfig = project.configurations.detachedConfiguration(armCSCoreDep)
        //armCSCoreConfig.setTransitive(false)
        //armCSCore = armCSCoreConfig.files[0].canonicalFile
	def armNTCoreDep = project.dependencies.create("edu.wpi.first.ntcore:ntcore-jni:2020.3.2:$classifier@jar")
        def armNTCoreConfig = project.configurations.detachedConfiguration(armNTCoreDep)
        armNTCoreConfig.setTransitive(false)
        armNTCore = armNTCoreConfig.files[0].canonicalFile
	//def armWPIUtilDep = project.dependencies.create("edu.wpi.first.wpiutil:wpiutil-jni:2020.3.2:$classifier@jar")
        //def armWPIUtilConfig = project.configurations.detachedConfiguration(armWPIUtilDep)
        //armWPIUtilConfig.setTransitive(false)
        //armWPIUtil = armWPIUtilConfig.files[0].canonicalFile

    }

    doLast {
        copy {
            from armOpenCv
            rename 'opencv(.+)', 'opencv.zip'
            into depFolder
        }
	/*copy {
	    from armCSCore
            rename 'cscore(.+)', 'cscore.zip'
            into depFolder
	}*/
	copy {
            from armNTCore
            rename 'ntcore(.+)', 'ntcore.zip'
            into depFolder
        }
        /*copy {
            from armWPIUtil
            rename 'wpiutil(.+)', 'wpiutil.zip'
            into depFolder
        }*/
    }
}
task tdownloadOpenCv() {
    description = 'Downloads the OpenCV Native maven dependency.'
    group = 'WPILib'
    def depFolder = "$buildDir/dependencies"
    def armOpenCv
    def armCSCore
    def armNTCore
    def armWPIUtil
    doFirst {
        def classifier = tgetOpenCvPlatformPackage()
        def armOpenCvDependency = project.dependencies.create("edu.wpi.first.thirdparty.frc2020.opencv:opencv-jni:3.4.7-2:$classifier@jar")
        def armOpenCvConfig = project.configurations.detachedConfiguration(armOpenCvDependency)
        armOpenCvConfig.setTransitive(false)
        armOpenCv = armOpenCvConfig.files[0].canonicalFile
	//def armCSCoreDep = project.dependencies.create("edu.wpi.first.cscore:cscore-jni:2020.3.2:$classifier@jar")
        //def armCSCoreConfig = project.configurations.detachedConfiguration(armCSCoreDep)
        //armCSCoreConfig.setTransitive(false)
        //armCSCore = armCSCoreConfig.files[0].canonicalFile
        def armNTCoreDep = project.dependencies.create("edu.wpi.first.ntcore:ntcore-jni:2020.3.2:$classifier@jar")
        def armNTCoreConfig = project.configurations.detachedConfiguration(armNTCoreDep)
        armNTCoreConfig.setTransitive(false)
        armNTCore = armNTCoreConfig.files[0].canonicalFile
	//def armWPIUtilDep = project.dependencies.create("edu.wpi.first.wpiutil:wpiutil-jni:2020.3.2:$classifier@jar")
        //def armWPIUtilConfig = project.configurations.detachedConfiguration(armWPIUtilDep)
        //armWPIUtilConfig.setTransitive(false)
        //armWPIUtil = armWPIUtilConfig.files[0].canonicalFile

    }

    doLast {
        copy {
            from armOpenCv
            rename 'opencv(.+)', 'opencv.zip'
            into depFolder
        }
        /*copy {
            from armCSCore
            rename 'cscore(.+)', 'cscore.zip'
            into depFolder
        }*/
        copy {
            from armNTCore
            rename 'ntcore(.+)', 'ntcore.zip'
            into depFolder
        }
	/*copy {
            from armWPIUtil
            rename 'wpiutil(.+)', 'wpiutil.zip'
            into depFolder
        }*/

    }
}

ext.openCvUnzipLocation = "$buildDir/opencv"

// Create a task that will unzip the wpiutil files into a temporary build directory
task unzipOpenCv(type: Copy) {
    description = 'Unzips the wpiutil maven dependency so that the include files and libraries can be used'
    group = 'WPILib'
    dependsOn downloadOpenCv

    from zipTree("$buildDir/dependencies/opencv.zip"),zipTree("$buildDir/dependencies/ntcore.zip")//, zipTree("$buildDir/dependencies/cscore.zip"), zipTree("$buildDir/dependencies/wpiutil.zip")
    into openCvUnzipLocation
}

ext.topenCvUnzipLocation = "$buildDir/tests/opencv"

// Create a task that will unzip the wpiutil files into a temporary build directory
task tunzipOpenCv(type: Copy) {
    description = 'Unzips the wpiutil maven dependency so that the include files and libraries can be used'
    group = 'WPILib'
    dependsOn tdownloadOpenCv

    from zipTree("$buildDir/dependencies/opencv.zip"), zipTree("$buildDir/dependencies/ntcore.zip")//,zipTree("$buildDir/dependencies/cscore.zip"), zipTree("$buildDir/dependencies/wpiutil.zip")
    into topenCvUnzipLocation
}


